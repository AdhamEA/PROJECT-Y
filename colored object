import cv2 as cv
import numpy as np 
import serial
import RPi.GPIO as GPIO
import time
l=[]
d=[]
b=0
k=0
a=0
servoPIN = 17
servoPIN1 = 18
servoPIN2 = 27
servoPIN3 = 22
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(servoPIN, GPIO.OUT)
GPIO.setup(servoPIN1, GPIO.OUT)
GPIO.setup(servoPIN2, GPIO.OUT)
GPIO.setup(servoPIN3, GPIO.OUT)
p = GPIO.PWM(servoPIN, 50) # GPIO 17 for PWM with 50Hz
p1 = GPIO.PWM(servoPIN1, 50) # GPIO 17 for PWM with 50Hz
p2 = GPIO.PWM(servoPIN2, 50) # GPIO 17 for PWM with 50Hz
p3 = GPIO.PWM(servoPIN3, 50) # GPIO 17 for PWM with 50Hz
# Initialization
def range_with_floats_unsigned(start, stop, step):
    while stop < start:
        yield start
        start -= step
def range_with_floats(start, stop, step):
    while stop > start:
        yield start
        start += step
def First():
    for i in range_with_floats_unsigned(10, 8, 0.2):
        
        p.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats_unsigned(5, 3.1, 0.2):
        
        p1.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats(6, 6.2, 0.3):
        
        p2.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats(2, 12, 1):
        
        p3.ChangeDutyCycle(i)
        time.sleep(0.15)
    time.sleep(2)
    for i in range_with_floats(3.5, 5, 0.4):
        
        p1.ChangeDutyCycle(i)
        time.sleep(0.15)
    time.sleep(2)
    for i in range_with_floats(8.5, 10, 0.3):
        
        p.ChangeDutyCycle(i)
        time.sleep(0.15)
    p2.ChangeDutyCycle(6)
    p3.ChangeDutyCycle(11)
def YellowTriangle():
    for i in range_with_floats_unsigned(10, 5, 0.3):
        
        p.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats_unsigned(5, 3.8, 0.2):
        
        p1.ChangeDutyCycle(i)
        time.sleep(0.15)
        
    for i in range_with_floats(6, 6.2, 0.1):
        
        p2.ChangeDutyCycle(i)
        time.sleep(0.15)

    for i in range_with_floats_unsigned(11, 3, 1):
        p3.ChangeDutyCycle(i)
        time.sleep(0.15)
    time.sleep(2)
    p.ChangeDutyCycle(10)
    p1.ChangeDutyCycle(5)
    p2.ChangeDutyCycle(6)
    p3.ChangeDutyCycle(2)
    time.sleep(2)
def Middle():
    p.ChangeDutyCycle(10)
    for i in range_with_floats_unsigned(5, 3.6, 0.3):
        p1.ChangeDutyCycle(i)
        time.sleep(0.2)
    for i in range_with_floats(6, 7, 0.3):
        p2.ChangeDutyCycle(i)
        time.sleep(0.2)
        
    for i in range_with_floats(2, 13, 1):
        p3.ChangeDutyCycle(i)
        time.sleep(0.15)
        
    time.sleep(2)
    p.ChangeDutyCycle(10)
    p1.ChangeDutyCycle(5)
    p2.ChangeDutyCycle(6)
    p3.ChangeDutyCycle(11)
    time.sleep(2)
def RedTriangle():
    for i in range_with_floats_unsigned(10, 5, 0.3):
        p.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats_unsigned(5, 3.8, 0.2):
        p1.ChangeDutyCycle(i)
        time.sleep(0.15)
        
    for i in range_with_floats(6, 6.2, 0.1):
        p2.ChangeDutyCycle(i)
        time.sleep(0.15)
    
    for i in range_with_floats_unsigned(11, 3, 1):
        p3.ChangeDutyCycle(i)
        time.sleep(0.15)
    time.sleep(2)
    p.ChangeDutyCycle(10)
    p1.ChangeDutyCycle(5)
    p2.ChangeDutyCycle(6)
    p3.ChangeDutyCycle(2)
    time.sleep(2)
def Last():
    for i in range_with_floats(10, 11.5, 0.3):
        p.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats_unsigned(5, 3.5, 0.2):
        p1.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats(6, 6.2, 0.2):
        p2.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats(2, 12, 1):
        p3.ChangeDutyCycle(i)
        time.sleep(0.15)
    time.sleep(2)
    for i in range_with_floats(3.5, 5, 0.4):
        p1.ChangeDutyCycle(i)
        time.sleep(0.15)
    time.sleep(2)
    p.ChangeDutyCycle(10)
    p2.ChangeDutyCycle(6)
    p3.ChangeDutyCycle(11)
    time.sleep(2)
def Throw():
    for i in range_with_floats_unsigned(10, 4, 0.3):
        p.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats_unsigned(5, 3.8, 0.2):
        p1.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats(6, 6.2, 0.1):
        p2.ChangeDutyCycle(i)
        time.sleep(0.15)
    for i in range_with_floats_unsigned(11, 3, 1):
        p3.ChangeDutyCycle(i)
        time.sleep(0.15)
    p.ChangeDutyCycle(10)
    p1.ChangeDutyCycle(5)
    p2.ChangeDutyCycle(6)
    p3.ChangeDutyCycle(2)
    time.sleep(2)

#ser = serial.Serial('COM9',9600)
State=1
cap = cv.VideoCapture(0)
cap.set(cv.CAP_PROP_FPS, 1)
def nothing(x):
    pass
cv.namedWindow("TRACKING")
cv.createTrackbar("LH","TRACKING",0,255, nothing)
cv.createTrackbar("LS","TRACKING",0,255, nothing)
cv.createTrackbar("LV","TRACKING",0,255,nothing)
cv.createTrackbar("UH","TRACKING",255,255,nothing)
cv.createTrackbar("US","TRACKING",255,255,nothing)
cv.createTrackbar("UV","TRACKING",255,255,nothing)
while True :
    p.start(10) # Initialization
    p1.start(5) # Initialization
    p2.start(6) # Initialization
    p3.start(4)
    ret , frame = cap.read()
    cv.imshow('frame',frame)
    canny = cv.Canny(frame,125,175)
    resized=cv.resize(frame,(300,250),interpolation=cv.INTER_CUBIC)
    #ok = cv.cvtColor(frame,cv.COLOR_BGR2HSV)
    #cv.imshow('ok',ok)
    lh=cv.getTrackbarPos("LH","TRACKING")
    ls=cv.getTrackbarPos("LS","TRACKING")
    lv=cv.getTrackbarPos("LV","TRACKING")
    uh=cv.getTrackbarPos("UH","TRACKING")
    us=cv.getTrackbarPos("US","TRACKING")
    uv=cv.getTrackbarPos("UV","TRACKING")
    x12=0
    y12=0
    x1=0
    y1=0
    CM_TO_PIXEL_X = 30.0 / 300
    CM_TO_PIXEL_Y = 21.0 / 250
    #lower=np.array([lh,ls,lv])
    #upper=np.array([uh,us,uv])
    #YELLOW
    #lower=np.array([0,127,118])
    #upper=np.array([97,179,178])
    #YRED
    lower=np.array([0,0,139])
    upper=np.array([217,83,237])
    #BLUE
    #lower=np.array([116,33,28])
    #upper=np.array([198,87,83])
    #GREEN
    #lower=np.array([33,57,12])
    #upper=np.array([94,101,47])
    mask=cv.inRange(resized,lower,upper)
    result=cv.bitwise_and(resized,resized,mask=mask)
    contours,_ = cv.findContours(mask,cv.RETR_TREE,cv.CHAIN_APPROX_SIMPLE)
    for cnt in contours : 
    #calculate area and remove small elements
          area = cv.contourArea(cnt)  
          if area > 200 :
               #ser.write(str.encode('1
               #cv.drawContours(img,[cnt],-1,(0,225,0),2)
               x,y,w,h = cv.boundingRect(cnt)
               cv.rectangle(result,(x,y),(x + w,y + h),(0,255,0),1)
               x1=int((x + x+w)/2)
               x1 = x1 * CM_TO_PIXEL_X 
               y1=int((y +y+h)/2)
               y1= y1 * CM_TO_PIXEL_Y
               peri=cv.arcLength(cnt,True)
               approx=cv.approxPolyDP(cnt,0.04*peri,True)
               if(len(approx)==3):
                   #print("Triangle")
                   if(x1>0 and x1<10):
                       print("RED , First ,Triangle")
                       State=111
                   elif(x1>10 and x1<20):
                       print("RED,Second,Triangle")
                       State=2
                   elif(x1>20 and x1<30):
                       print("RED,third,Triangle")
                       State=3
               elif(len(approx)==4):
                   #print("Rectangle")
                   if(x1>0 and x1<10):
                       print("RED , First ,Rectangle")
                       State=5
                   elif(x1>10 and x1<20):
                       print("RED,Second,Rectangle")
                       State=6
                   elif(x1>20 and x1<30):
                       print("RED,third,Rectangle")
                       State=7
               else:
                    #print("Circle")
                    if(x1>0 and x1<10):
                       print("RED , First ,Circle")
                       State=9
                    elif(x1>10 and x1<20):
                        State=10
                        print("RED,Second,Circle")
                    elif(x1>20 and x1<30):
                        State=11
                        print("RED,third,Circle")   
       #YELLOW
    lower1=np.array([0,127,118])
    upper1=np.array([97,179,178])     
    #lower1=np.array([19,19,54])
    #upper1=np.array([50,38,138])
    mask1=cv.inRange(resized,lower1,upper1)
    result1=cv.bitwise_and(resized,resized,mask=mask1)
    contours1,_ = cv.findContours(mask1,cv.RETR_TREE,cv.CHAIN_APPROX_SIMPLE)
    for cnt in contours1 : 
    #calculate area and remove small elements 
          area = cv.contourArea(cnt)
          if area > 200 :
               #ser.write(str.encode('2'))
               #cv.drawContours(img,[cnt],-1,(0,225,0),2)
               x,y,w,h = cv.boundingRect(cnt)
               cv.rectangle(result1,(x,y),(x + w,y + h),(0,255,0),1)
               x12=int((x + x+w)/2)
               x12 = x12 * CM_TO_PIXEL_X
               y12=int((y +y+h)/2)
               y12 = y12 * CM_TO_PIXEL_Y
               peri=cv.arcLength(cnt,True)
               approx=cv.approxPolyDP(cnt,0.04*peri,True)
               if(len(approx)==3):
                   #print("Triangle")
                   if(x12>0 and x12<10):
                       print("Yellow,First ,Triangle")
                       State=13
                   elif(x12>10 and x12<20):
                       print("Yellow,Second,Triangle")
                       State=14
                   elif(x12>20 and x12<30):
                       print("Yellow,third,Triangle")
                       State=15     
               elif(len(approx)==4):
                   #print("Rectangle")
                   if(x12>0 and x12<10):
                       print("Yellow , First ,Rectangle")
                       State=17
                   elif(x12>10 and x12<20):
                       print("Yellow,Second,Rectangle")
                       State=18
                   elif(x12>20 and x12<30):
                       print("Yellow,third,Rectangle")  
                       State=19
               else:
                    #print("Circle")
                    if(x12>0 and x12<10):
                       print("Yellow , First ,Circle")
                       State=21
                    elif(x12>10 and x12<20):
                       print("Yellow,Second,Circle")
                       State=22
                    elif(x12>20 and x12<30):
                       print("Yellow,third,Circle")
                       State=23
    #ser.write(str.encode('3'))     
    #ser.write(str.encode('0'))
    #print(x1,y1,"---",x12,y12)
    cv.imshow('frame2',result1)
    cv.imshow('frame',result)
    cv.imshow('image',resized)
    l.append(State)
    #cv.imshow('mask',mask)
    print(l)
    if a == 5:
        if b == 1:
            d=[]
            b=50   
        if b==0:
            d= list(set(l))
            for i in range(0,len(d)-1):
                if ((d[i]==0 )or (d[i]==1)):
                    d.pop(i)
            for i in range(0,len(d)-1):
                if ((d[i]==0 )or (d[i]==1)):
                    d.pop(i)
            d=[d[0]]
            print("d=",d)   
            for i in d :
                if i == 111 or i ==5 or i == 9 or i ==13 or i==17 or i==21 :
                    First()
                    if i == 111:
                        RedTriangle()
                        
                    if i == 13:
                        YellowTriangle()
                    else:
                        Throw()
                    b=1
                if i == 2 or i ==6 or i == 10 or i ==14 or i==18 or i==22 :
                    Middle()
                    if i == 2:
                        RedTriangle()
                    if i == 14:
                        YellowTriangle()
                    else:
                        Throw()
                    b=1
                if i == 3 or i ==7 or i == 11 or i ==15 or i==19 or i==23 :
                    Last()
                    if i == 2:
                        RedTriangle()
                        
                    if i == 14:
                        YellowTriangle()
                    else:
                        Throw()
                    b=1
        if b == 50 :
            b=0
        a=0
        l=[]
        d=[]   
    a=a+1
    State=0
    if cv.waitKey(1) == ord('q'):
        break 
cap.release()
cv.destroyAllWindows()






